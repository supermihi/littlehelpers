#!/usr/bin/python3
# coding: UTF-8
# Copyright: 2013 Michael Helmling
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation
#
# mensakoblenz - Skript zur Textausgabe des aktuellen Tagesmenüs in der
# Mensa der Uni Koblenz.

from collections import OrderedDict
import datetime, re, sys
from urllib.request import urlopen
import json

url = "https://m.uni-koblenz.de/server/core/interfaces/cafeteria.php?date={}"

def getMenu(filters=[], offset=0):
    """Das Menü von (heute + *offset*); falls *filter* gegeben, nur Menüs der entsprechenden Art.
    
    Ausgegeben werden alle Menüs die mindestens einen der Filter enthalten.
    """
    titleMap = { "lunch"     : "Menü 1",
                 "lunch_veg" : "Vegetarisches Menü",
                 "extra"     : "Extratheke",
                 "dinner"    : "Abendmensa",
                 "bistro"    : "Bistro" }
    datestr = (datetime.date.today() + datetime.timedelta(days=offset)).strftime("%d.%m.%Y")
    data = json.loads(urlopen(url.format(datestr)).read().decode())
    table = OrderedDict()
    filters = [f.lower() for f in filters]
    for menu in data['menus']:
        offer = titleMap[menu['offer']]
        if len(filters) > 0 and not any(f in offer.lower() for f in filters):
            continue
        table[offer] = menu['title']
    return table


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Mensa-Menü der Uni Koblenz anzeigen")
    parser.add_argument("-s", "--short", action="store_true", help="Ausgabe in Kurzform")
    parser.add_argument("-m", "--maindish", action="store_true",
                        help="Nur Hauptgericht (ohne Suppe, Salat, Dessert) anzeigen")
    parser.add_argument("offset", nargs="?", metavar="+/-n",
                        help="Tag ändern, z.B. '+7' (in einer Woche), '-1' (gestern)")
    parser.add_argument("filter", nargs="*", help="Filter für Menü-Art (z.B. 'veg', '1', …)")
    args = parser.parse_args()
    posargs = args.filter
    if args.offset:
        posargs += [args.offset]
    offset = 0
    for i, arg in enumerate(posargs):
        if arg[0] in "+-":
            offset = int(arg)
            del posargs[i]
            break
    try:
        menu = getMenu(filters=posargs, offset=offset)
    except IndexError:
        print("Kein Menü gefunden. Ist schon Wochenende?")
        sys.exit(1)
    if args.maindish:
        for key, value in menu.items():
            words = re.split("[\W,]+", value)
            if "uppe" in words[0]:
                del words[0]
            while words[-1] in ("Dessert", "Salat", "mit", "und", "dazu"):
                del words[-1]
            menu[key] = " ".join(words).strip("., ")
    if not args.short:
        maxNameLength = max(len(kind) for kind in menu)
        for kind, dish in menu.items():
            print(('{:' + str(maxNameLength+1) + 's}: {}').format(kind, dish))
    else:
        print(" • ".join(menu.values()))
