#!/usr/bin/python3
# coding: UTF-8
# Copyright: 2013 Michael Helmling
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation
#
# mensakoblenz - Skript zur Textausgabe des aktuellen Tagesmenüs in der
# Mensa der Uni Koblenz.
 

from collections import OrderedDict
import datetime
import urllib.request
import re
import sys
from html.parser import HTMLParser

speiseplanURL="http://www.studierendenwerk-koblenz.de/go/uni-campus-koblenz/essen/speiseplan"
tableClass="speiseplan kw kw-{:02d}" # Klasse der Speiseplan-Tabelle; Kalenderwoche als Platzhalter

def getHTML():
    """Komplette HTML-Seite abrufen."""
    with urllib.request.urlopen(speiseplanURL) as f:
        html = f.read().decode('utf-8')
    return html


class MensaParser(HTMLParser):
    """Parser für die Speiseplan-Seite der Mensa Koblenz."""
    
    def __init__(self, tableClass):
        """Konstruktor. *tableClass* ist das class-Attribut der gesuchten Tabelle."""
        super().__init__(strict=False)
        self.tableClass = tableClass
        self.inTable = self.inTh = self.inTd = self.skippedFirstCol = False
        self.ths = [] # Spaltenköpfe = vesch. Essensausgaben
        self.tds = [] # Tabellendaten = Menüs der versch. Tage und Ausgaben

    def handle_starttag(self, tag, attrs):
        """Handler für öffnende HTML-Tags.
        
        Berücksichtigt wird folgendes:
         - tag "table" und class=self.tableClass: Speiseplan beginnt (setzt self.inTable=True)
         - tag "th" und self.inTable: setze ggf. self.skippedFirstCol (erste Spalte enthält nur
           das Datum; für uns nicht relevant), ansonsten setze self.inTh=True
         - tag "td" und self.inTable: wie bei "th", setzt aber self.inTd=True
         - tag "tr" und self.inTable: neue Zeile beginnt. Setze self.skippedFirstCol=False und füge
           neue Liste zu self.tds hinzu (außer in Header-Zeile)
        """
        if tag=="table" and ("class", self.tableClass) in attrs:
            self.inTable = True
        if self.inTable:
            if tag=="th":
                if not self.skippedFirstCol:
                    self.skippedFirstCol = True
                    return
                self.inTh = True
            elif tag=="td":
                if not self.skippedFirstCol:
                    self.skippedFirstCol = True
                    return
                self.inTd = True
            elif tag=="tr":
                self.skippedFirstCol = False
                if len(self.ths) > 0:
                    self.tds.append([])
    
    def handle_data(self, data):
        """Speichert die relevanten Daten in self.ths bzw self.tds."""
        if self.inTable:
            if self.inTh:
                self.ths.append(data)
            elif self.inTd:
                rex = re.compile(r'\s+')
                self.tds[-1].append(rex.sub(' ', data).replace(" :-)", "").strip(". "))
                
    def handle_endtag(self, tag):
        """Handle für schließende HTML-Tags. Setzt ggf. die self.in*-Flags auf False."""
        if self.inTable:
            if tag=="table":
                self.inTable = False
            elif tag=="th":
                self.inTh = False
            elif tag=="td":
                self.inTd = False


def getTable(html, week):
    """Tabelle der angegebenen Woche als Liste von OrderedDicts parsen.
    
    Gibt eine Liste zurück, die den numerischen Wochentag (0 = Montag) auf ein geordnetes
    Dictionary abbildet. In letzterem wird die Art des Menüs ("Abendmensa", "Menü 1", etc.)
    auf das Menü des entsprechenden Wochentags abgebildet.
    """
    parser = MensaParser(tableClass.format(week))
    parser.feed(html)
    return [OrderedDict(zip(parser.ths, row)) for row in parser.tds]
        
def currentWeekAndDay():
    """Gibt die aktuelle Kalenderwoche und den Wochentag als Tupel zurück"""
    today = datetime.date.today()
    return today.isocalendar()[1], today.weekday()

extraFilters = { "all" : "", "veggie" : "vegetarisch", "pasta" : "extra"}
"""Eine Liste von Ersetzungstexten für Kommandozeilenparameter."""

def todaysMenu(filters=None):
    """Das heutige Menü; falls *filter* gesetzt ist, nur Menüs der entsprechenden Art.
    
    Gefiltert werden alle Menüarten die den Filter (oder den entsprechenden Ersetzungstext aus
    *extraFilters* als Teiltext enthalten. Beispiele: "veg", "veggie", "abend", "pasta".
    """
    html = getHTML()
    week, day = currentWeekAndDay()
    table = getTable(html, week)
    tableToday = table[day]
    if filters is not None and len(filters) > 0:
        filters = [extraFilters[f.lower()] if f in extraFilters else f.lower() for f in filters]
        menu = OrderedDict()
        for kind, dish in tableToday.items():
            if not any(f in kind.lower() for f in filters):
                continue
            menu[kind] = dish
    else:
        menu = OrderedDict(tableToday)
    return menu

if __name__ == "__main__":
    """Standardverhalten: Gib das heutige Menü aus; eventueller Filter wird aus Argument 1 gelesen."""
    import argparse
    parser = argparse.ArgumentParser(description="Menü der Mensa Koblenz anzeigen")
    parser.add_argument("-s", "--short", action="store_true", help="Ausgabe in Kurzform")
    parser.add_argument("-m", "--maindish", action="store_true",
                        help="Nur Hauptgericht (ohne Suppe, Salat, Dessert) anzeigen")
    parser.add_argument("filter", nargs="*", help="Menüsorten ausfiltern")
    args = parser.parse_args()
    menu = todaysMenu(args.filter)
    if args.maindish:
        for key, value in menu.items():
            words = value.split(" ")
            if "uppe" in words[0]:
                del words[0]
            for buzz in "Dessert", "Salat", "und":
                if words[-1] == buzz:
                    del words[-1]
            menu[key] = " ".join(words).strip("., ")
    if not args.short:
        maxNameLength = max(len(kind) for kind in menu)
        for kind, dish in menu.items():
            print(('{:' + str(maxNameLength) + 's}: {}').format(kind, dish))
    else:
        print("; ".join(menu.values()))
