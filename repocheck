#!/usr/bin/python3

# Script to check whether repositories are in a clean state, i.e. no local
# modifications and no newer version upstream.
#
# List of repositories is read from $XDG_CONFIG_HOME/repocheck

import os, subprocess
import logging
import argparse
from os.path import join, expanduser, expandvars


def checkRepository(path, fetch=False):
    logging.info('checking repository at "{}" ...'.format(path))
    if os.path.isdir(join(path, '.git')):
        return checkGit(path, fetch)
    elif os.path.isdir(join(path, '.svn')):
        return checkSubversion(path, fetch)
    elif os.path.isdir(join(path, '.hg')):
        return checkMercurial(path, fetch)
    else:
        raise ValueError('Unknown repository type: {}'.format(path))
        

def checkSubversion(path, fetch=False):
    # check local modifications
    output = subprocess.check_output(['svn', 'status', '-q'], cwd=path, stderr=subprocess.DEVNULL)
    if output != b"":
        return False
    elif fetch:
        langCEnv = os.environ.copy()
        langCEnv['LANG'] = 'C'
        outputRemote = subprocess.check_output(['svn', 'info', '-r', 'HEAD'], cwd=path, env=langCEnv)
        outputLocal = subprocess.check_output(['svn', 'info'], cwd=path, env=langCEnv)
        def revLine(out):
            for line in out.splitlines():
                if line.startswith(b'Last Changed Rev: '):
                    return line
        if revLine(outputRemote) != revLine(outputLocal):
            return False
    return True


def checkGit(path, fetch=False):
    if fetch:
        subprocess.check_call(['git', 'fetch'], cwd=path, stdout=subprocess.DEVNULL,
                              stderr=subprocess.DEVNULL)
    output = subprocess.check_output(['git', 'diff', 'origin/master'], cwd=path)
    return output == b""

def checkMercurial(path, fetch=False):
    if fetch:
        subprocess.check_call(['hg', 'pull'], cwd=path, stdout=subprocess.DEVNULL,
                              stderr=subprocess.DEVNULL)
    return subprocess.check_output(['hg', 'diff', '-r', 'tip'], cwd=path) == b''
        
if __name__ == "__main__":
    XDG_CONFIG_HOME = os.environ.get("XDG_CONFIG_HOME", expandvars("$HOME/.config"))
    configfile = join(XDG_CONFIG_HOME, 'repocheck')
    repos = []
    with open(configfile, 'rt') as f:
        for line in f:
            repos.append(expanduser(line[:-1]))
    parser = argparse.ArgumentParser()
    parser.add_argument('action', nargs='?', choices=('fetch', 'display'), default='display')
    parser.add_argument('-v', '--verbose', action='store_true')
    args = parser.parse_args()
    logging.basicConfig(format='%(levelname)s:%(message)s',
                        level=logging.DEBUG if args.verbose else logging.WARNING)
    unclean = []
    for repo in repos:
        try:
            if not checkRepository(repo, args.action == 'fetch'):
                unclean.append(repo)
        except Exception as e:
            print('ERROR checking repository at {}'.format(repo))
            print(e)
    if len(unclean):
        print('Unclean repos: \n{}'.format('\n'.join(unclean)))

